Feature: using the results of an API call as a data-source

  @setup
  Scenario:
    * url 'https://jsonplaceholder.typicode.com/users'
    * method get
    * def data = [{ id: 1, name: 'a' }, { id: 2, name: 'b' }]

  Scenario Outline: ws1
    * print "id ==> " , id
    * print "name ==> ", name

    Examples:
      | karate.setup().data |

  @setup
  Scenario: S2
    * def names = ["COUNTRY", "NAME", "SURNAME", "SEX", "ID"]
    * def data2 = names.map(x => ({ name: x }))
    * print data2

  Scenario Outline: name:
    * print 'name is:', name

    Examples:
      | karate.setup().data2 |

  @setup=myname
  Scenario:
    * def data = [{ a: 1 }, { a: 2}]

  Scenario Outline:
    * print __row
    * print a

    Examples:
      | karate.setup('myname').data |

  @setup=animal
  Scenario:
    * def animals = read('animal.json')
    * print animals

  Scenario Outline: Data from file
    * print name, 'is', color
    Examples:
      | karate.setup('animal').animals |

#    @setup will be introduced as a "built-in" tag.
#    @setup will not be run when the Feature is run, it behaves like @ignore. it can only be "called"
#  so there is no need to have @ignore, @setup is sufficient
#  there can be only one @setup in a Feature. but as we see later, we can pass arguments to it
#  the Background will run for every Scenario even if it is an Outline row, or generated by a dynamic outline. this is a breaking change
#  the Background will NOT run for the @setup scenario. yes this is a bit inconsistent, but this is the best I could come up with. yes, @setup is "special"
#  we can introduce a karate.setup() API. it can have a second form karate.setup({ argName: 'argValue' })
#  does karate-config.js execute before the @setup ? yes
#  does karate-config.js execute before each row of a dynamic scenario-outline ? this is hard one. I vote yes, for consistency